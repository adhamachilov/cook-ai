import { AIRecipeRequest, Recipe } from '../types';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { buildPrompt } from './buildPrompt';

// We'll use timestamps in the recipe ID generation to ensure uniqueness

// Store previous recipe IDs to ensure uniqueness across requests
const previousRecipeIds = new Map<string, Set<string>>();

/**
 * Generates unique recipes based on provided ingredients and preferences
 * Can generate up to 6 recipes with maxResults parameter
 */
export async function generateUniqueRecipes(request: AIRecipeRequest, offset = 0): Promise<Recipe[]> {
  console.log('Generating recipes with:', request);
  
  // Create a unique request key based on the ingredients
  const requestKey = request.ingredients.sort().join('-').toLowerCase();
  
  // Initialize recipe ID tracking for this request if needed
  if (!previousRecipeIds.has(requestKey)) {
    previousRecipeIds.set(requestKey, new Set());
  }
  
  // Get the set of previously used recipe identifiers for this ingredient combination
  const usedIds = previousRecipeIds.get(requestKey)!;
  
  // Clear previous recipes if this is a new search (offset === 0 means first request)
  if (offset === 0) {
    console.log('New search, clearing previous recipe tracking');
    usedIds.clear();
  }
  
  try {
    // Initialize the API key
    const API_KEY = 'AIzaSyCUNZNb-Z696gRKZr_rh7KwdTJaG-_iYIw';
    const genAI = new GoogleGenerativeAI(API_KEY);
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });

    // Build a prompt that forces the AI to create recipes with the specified ingredients
    const prompt = buildPrompt(request, offset);
    
    // Set a safety timeout
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Request timed out')), 15000);
    });
    
    // Call the API
    console.log('Calling Gemini API...');
    const apiPromise = model.generateContent(prompt);
    const result = await Promise.race([apiPromise, timeoutPromise]) as any;
    
    if (!result || !result.response) {
      throw new Error('No response from API');
    }
    
    const text = result.response.text();
    console.log('Got response from API, length:', text.length);
    
    // Parse the recipes from the response
    const recipes = parseRecipes(text, request.ingredients);
    
    // If we couldn't parse any recipes, throw an error
    if (!recipes || recipes.length === 0) {
      throw new Error('Failed to parse recipes from response');
    }
    
    console.log(`Successfully generated ${recipes.length} recipes`);
    
    // Take only distinct recipes with maximum variety
    const ensureDistinctRecipes = (allRecipes: Recipe[], maxCount: number = 6): Recipe[] => {
      // If we don't have enough recipes, return what we have
      if (allRecipes.length <= maxCount) {
        return allRecipes;
      }
      
      // Get distinct recipe types to maximize variety
      const categorizedRecipes = new Map<string, Recipe[]>();
      
      // Group recipes by cuisine/cooking method
      allRecipes.forEach(recipe => {
        const category = recipe.cuisineType || 'Other';
        if (!categorizedRecipes.has(category)) {
          categorizedRecipes.set(category, []);
        }
        categorizedRecipes.get(category)!.push(recipe);
      });
      
      // Pick from different categories when possible
      const result: Recipe[] = [];
      const categories = Array.from(categorizedRecipes.keys());
      
      // First try to get one recipe from each different category
      for (let i = 0; i < categories.length && result.length < maxCount; i++) {
        const categoryRecipes = categorizedRecipes.get(categories[i])!;
        if (categoryRecipes.length > 0) {
          result.push(categoryRecipes.shift()!);
        }
      }
      
      // Fill remaining slots from any category
      while (result.length < maxCount && categories.some(cat => categorizedRecipes.get(cat)!.length > 0)) {
        for (let i = 0; i < categories.length && result.length < maxCount; i++) {
          const categoryRecipes = categorizedRecipes.get(categories[i])!;
          if (categoryRecipes.length > 0) {
            result.push(categoryRecipes.shift()!);
          }
        }
      }
      
      // Return exactly the requested number of recipes or all we have if less
      return result.slice(0, maxCount);
    };
    
    // Filter recipes that have already been shown to the user
    const nonRepeatingRecipes = recipes.filter((recipe: Recipe) => {
      // Check if we've seen this recipe title before
      const titleKey = recipe.title.toLowerCase().replace(/\s+/g, '');
      const hasBeenSeen = Array.from(usedIds).some(id => id.includes(titleKey));
      return !hasBeenSeen;
    });
    
    // Get distinct recipes based on requested count (max 6)
    const requestedCount = request.maxResults || 3; // Default to 3 if not specified
    const distinctRecipes = ensureDistinctRecipes(nonRepeatingRecipes, requestedCount);
    
    // If we couldn't get enough unique recipes, add some fallbacks
    const finalRecipes = distinctRecipes.length === requestedCount ? distinctRecipes : 
      [...distinctRecipes, ...createFallbackRecipes(request.ingredients).slice(0, requestedCount - distinctRecipes.length)];
    
    // Save recipe identifiers to prevent repeats in subsequent requests
    finalRecipes.forEach(recipe => {
      const titleKey = recipe.title.toLowerCase().replace(/\s+/g, '');
      usedIds.add(`${recipe.id}-${titleKey}`);
    });
    
    // Ensure we're returning the requested number of recipes (max 6)
    console.log(`Returning ${finalRecipes.length} unique recipes (requested: ${requestedCount})`);
    return finalRecipes.slice(0, requestedCount);
    
  } catch (error) {
    console.error('Error generating recipes:', error);
    
    // Create fallback recipes with a warning message
    const fallbackRecipes = createFallbackRecipes(request.ingredients);
    console.log('Using fallback recipes');
    // Return the requested number of recipes (default to 3 if not specified)
    const requestedCount = request.maxResults || 3;
    return fallbackRecipes.slice(0, requestedCount);
  }
}

/**
 * Builds a prompt for the AI model
 */
function buildPrompt(request: AIRecipeRequest, offset: number): string {
  const { ingredients, cuisineType, dietaryPreferences } = request;
  
  // Start with a clear instruction
  // Determine how many recipes to generate (default to 3 if not specified)
  const recipeCount = request.maxResults || 3;
  let prompt = `Generate EXACTLY ${recipeCount} unique recipes that MUST use these specific ingredients as their MAIN components: ${ingredients.join(', ')}.

`;\n\n`;
  
  // Add specificity about unique recipe generation
  if (offset > 0 || request.excludeIds?.length) {
    const exclusionCount = offset || (request.excludeIds?.length || 0);
    prompt += `IMPORTANT: I've already seen ${exclusionCount} recipes with these ingredients. Please provide COMPLETELY DIFFERENT recipes than before - different cooking styles, cuisines, and preparation methods.

`;
    prompt += `Do NOT repeat any recipes or close variations of recipes I've already seen.

`;
  }
  
  // If we have specific recipe IDs to exclude, emphasize that
  if (request.excludeIds && request.excludeIds.length > 0) {
    prompt += `CRITICAL: Generate recipes that are FUNDAMENTALLY DIFFERENT in style, ingredients used, and cooking methods from previous recipes. Ensure maximum diversity and creativity.

`;
    
    // Extract recipe titles from IDs for more specific exclusion
    const titlesToExclude = request.excludeIds.map(id => id.split('-').slice(1).join('-')).join(', ');
    if (titlesToExclude) {
      prompt += `Specifically, DO NOT create recipes similar to these previously generated recipes: ${titlesToExclude}\n\n`;
    }
  }
  
  // If diversity is explicitly requested
  if (request.ensureDiversity) {
    prompt += `EXTREMELY IMPORTANT: Each recipe MUST be COMPLETELY DIFFERENT from the others in cooking style, cuisine type, preparation method, and overall concept. Maximum diversity is required!\n\n`;
  }
  
  prompt += 'CRITICAL RULES FOR RECIPE GENERATION (MUST FOLLOW):\n';
  prompt += `1. Each recipe MUST prominently use the following ingredients: ${ingredients.join(', ')}\n`;
  prompt += '2. The recipe title MUST start with the main ingredient\n';
  prompt += '3. Ingredients should be listed with quantities\n';
  prompt += '4. Instructions should be detailed and step-by-step\n';
  prompt += '5. Each recipe MUST be different in style, cooking method, and flavor profile\n';
  
  // Add cuisine type if specified
  if (cuisineType && cuisineType !== 'Any') {
    prompt += `\nCuisine type: ${cuisineType}\n`;
  }
  
  // Add dietary preferences if specified
  if (dietaryPreferences && dietaryPreferences.length > 0) {
    prompt += `\nDietary preferences: ${dietaryPreferences.join(', ')}\n`;
  }
  
  // Add timestamp to ensure different results each time
  prompt += `\nGeneration timestamp: ${Date.now()}\n`;
  
  // Instructions for JSON format
  prompt += '\nRETURN THE RECIPES AS A VALID JSON ARRAY with the following structure for each recipe:\n';
  prompt += `{
  "title": "Recipe Title",
  "description": "Brief description",
  "ingredients": ["ingredient 1", "ingredient 2", ...],
  "instructions": ["step 1", "step 2", ...],
  "cookingTime": 30,
  "servings": 4,
  "calories": 400,
  "tags": ["tag1", "tag2", ...],
  "cuisineType": "Cuisine",
  "dietaryInfo": {
    "isVegetarian": true/false,
    "isVegan": true/false,
    "isGlutenFree": true/false,
    "isDairyFree": true/false
  }
}\n\n`;

  prompt += 'ONLY RETURN THE JSON. Do not include any other text, explanations, or markdown formatting.\n';
  
  return prompt;
}

/**
 * Parses recipes from the AI response
 */
function parseRecipes(text: string, requestedIngredients: string[]): Recipe[] {
  try {
    // Try to extract JSON from the response
    const jsonMatches = text.match(/\[\s\S]*\]/);
    
    if (!jsonMatches) {
      console.error('No JSON array found in response');
      return [];
    }
    
    const jsonText = jsonMatches[0];
    const recipes = JSON.parse(jsonText);
    
    if (!Array.isArray(recipes)) {
      console.error('Parsed content is not an array');
      return [];
    }
    
    // Recipe name templates for enhancement if needed
    const recipePrefixes = ['Homemade', 'Classic', 'Delicious', 'Traditional', 'Savory', 'Gourmet', 'Hearty'];
    
    // Cuisine-specific recipe types for better naming
    const cuisineRecipeTypes: Record<string, string[]> = {
      'Italian': ['Pasta', 'Risotto', 'Pizza', 'Bruschetta', 'Frittata'],
      'Mexican': ['Tacos', 'Enchiladas', 'Quesadilla', 'Burrito', 'Fajitas'],
      'Indian': ['Curry', 'Masala', 'Biryani', 'Tikka', 'Chutney'],
      'Chinese': ['Stir-Fry', 'Dumplings', 'Noodles', 'Rice Bowl', 'Spring Rolls'],
      'Mediterranean': ['Salad', 'Bake', 'Wrap', 'Bowl', 'Roast']
    };
    
    // Process and validate each recipe
    const validRecipes: Recipe[] = recipes.map((recipe, index) => {
      // Generate a truly unique ID based on timestamp and ingredients
      const id = `recipe-${Date.now()}-${index}-${Math.random().toString(36).substring(2, 9)}`;
      
      // Enhance title if needed
      let title = recipe.title;
      if (!title || title.length < 5 || title === 'Recipe Title') {
        const mainIngredient = requestedIngredients[0].charAt(0).toUpperCase() + requestedIngredients[0].slice(1);
        const cuisine = recipe.cuisineType || 'International';
        const recipeType = cuisineRecipeTypes[cuisine]?.length ? 
          cuisineRecipeTypes[cuisine][Math.floor(Math.random() * cuisineRecipeTypes[cuisine].length)] : 
          'Dish';
        
        const prefix = recipePrefixes[Math.floor(Math.random() * recipePrefixes.length)];
        title = `${prefix} ${mainIngredient} ${recipeType}`;
      }
      
      // Enhance description if needed
      let description = recipe.description;
      if (!description || description.length < 20 || description === 'Brief description') {
        description = `A delicious recipe featuring ${requestedIngredients.join(', ')} prepared in a ${recipe.cuisineType || 'flavorful'} style. This dish combines fresh ingredients with aromatic herbs and spices for a satisfying meal that's perfect for any occasion.`;
      }
      
      // Ensure we have proper ingredients with quantities
      let ingredients = recipe.ingredients || [];
      if (ingredients.length < 5) {
        // Create proper measurements based on ingredient types
        const getAppropriateQuantity = (ingredient: string): string => {
          const lowerIng = ingredient.toLowerCase();
          
          // Proteins
          if (lowerIng.includes('chicken') || lowerIng.includes('beef') || 
              lowerIng.includes('pork') || lowerIng.includes('fish') || 
              lowerIng.includes('meat') || lowerIng.includes('turkey')) {
            return `1 pound ${ingredient}, cut into pieces`;
          }
          
          // Vegetables
          else if (lowerIng.includes('onion') || lowerIng.includes('pepper') || 
                  lowerIng.includes('tomato') || lowerIng.includes('carrot') || 
                  lowerIng.includes('potato') || lowerIng.includes('eggplant')) {
            return `2 medium ${ingredient}s, diced`;
          }
          
          // Leafy greens
          else if (lowerIng.includes('spinach') || lowerIng.includes('kale') || 
                  lowerIng.includes('lettuce') || lowerIng.includes('cabbage')) {
            return `4 cups ${ingredient}, chopped`;
          }
          
          // Herbs
          else if (lowerIng.includes('basil') || lowerIng.includes('parsley') || 
                  lowerIng.includes('cilantro') || lowerIng.includes('mint')) {
            return `1/4 cup fresh ${ingredient}, chopped`;
          }
          
          // Grains
          else if (lowerIng.includes('rice') || lowerIng.includes('pasta') || 
                  lowerIng.includes('quinoa') || lowerIng.includes('couscous')) {
            return `1 1/2 cups ${ingredient}, uncooked`;
          }
          
          // Liquids
          else if (lowerIng.includes('water') || lowerIng.includes('broth') || 
                  lowerIng.includes('milk') || lowerIng.includes('cream')) {
            return `2 cups ${ingredient}`;
          }
          
          // Fruits
          else if (lowerIng.includes('apple') || lowerIng.includes('pear') || 
                  lowerIng.includes('orange') || lowerIng.includes('banana')) {
            return `2 ${ingredient}s, peeled and sliced`;
          }
          
          // Spices
          else if (lowerIng.includes('pepper') || lowerIng.includes('salt') || 
                  lowerIng.includes('cumin') || lowerIng.includes('paprika')) {
            return `1 teaspoon ${ingredient}`;
          }
          
          // Default
          return `1 cup ${ingredient}, prepared appropriately`;
        };
        
        ingredients = [
          ...requestedIngredients.map(ing => getAppropriateQuantity(ing)),
          '3 tablespoons olive oil',
          '2 cloves garlic, minced',
          '1 medium onion, diced',
          'Salt and freshly ground pepper to taste',
          '1/4 cup fresh herbs (basil, parsley, etc.)',
          '1 lemon, juiced (optional)'
        ];
      }
      
      // Ensure we have proper instructions
      let instructions = recipe.instructions || [];
      if (instructions.length < 3) {
        instructions = [
          'Prepare all ingredients by washing, peeling, and chopping as needed.',
          'Heat oil in a large pan over medium heat.',
          `Add ${requestedIngredients.join(' and ')} to the pan and cook for 5-7 minutes.`,
          'Season with salt, pepper, and your favorite herbs.',
          'Serve hot and enjoy!'
        ];
      }
      
      return {
        id,
        title,
        description,
        imageUrl: '',
        ingredients,
        instructions,
        cookingTime: recipe.cookingTime || 30,
        servings: recipe.servings || 4,
        calories: recipe.calories || 400,
        tags: recipe.tags && recipe.tags.length > 0 ? recipe.tags : [...requestedIngredients.map(i => i.toLowerCase()), 'homemade', 'dinner'],
        cuisineType: recipe.cuisineType || 'International',
        dietaryInfo: {
          isVegetarian: recipe.dietaryInfo?.isVegetarian || !ingredients.some((ing: string) => ing.toLowerCase().includes('meat') || ing.toLowerCase().includes('chicken') || ing.toLowerCase().includes('beef')),
          isVegan: recipe.dietaryInfo?.isVegan || !ingredients.some((ing: string) => ing.toLowerCase().includes('meat') || ing.toLowerCase().includes('milk') || ing.toLowerCase().includes('cheese') || ing.toLowerCase().includes('egg')),
          isGlutenFree: recipe.dietaryInfo?.isGlutenFree || !ingredients.some((ing: string) => ing.toLowerCase().includes('wheat') || ing.toLowerCase().includes('flour') || ing.toLowerCase().includes('pasta')),
          isDairyFree: recipe.dietaryInfo?.isDairyFree || !ingredients.some((ing: string) => ing.toLowerCase().includes('milk') || ing.toLowerCase().includes('cheese') || ing.toLowerCase().includes('cream') || ing.toLowerCase().includes('butter'))
        }
      };
    });
    
    // Validate that recipes actually contain the requested ingredients
    const filteredRecipes = validRecipes.filter(recipe => {
      const allIngredients = recipe.ingredients.join(' ').toLowerCase();
      return requestedIngredients.some(ingredient => 
        allIngredients.includes(ingredient.toLowerCase())
      );
    });
    
    return filteredRecipes;
  } catch (error) {
    console.error('Error parsing recipes:', error);
    return [];
  }
}

/**
 * Creates fallback recipes when API fails
 */
function createFallbackRecipes(ingredients: string[]): Recipe[] {
  // Create dynamic fallback recipes based on the requested ingredients
  const timestamp = Date.now();
  const mainIngredient = ingredients[0] || 'food';
  
  // Create a more descriptive recipe name based on ingredients
  const getRecipeName = (baseIngredient: string, style: string): string => {
    // Capitalize first letter
    const ingredient = baseIngredient.charAt(0).toUpperCase() + baseIngredient.slice(1);
    
    // Recipe name templates
    const templates = [
      `${ingredient} ${style}`,
      `Homemade ${ingredient} ${style}`,
      `${style} ${ingredient} Delight`,
      `Classic ${ingredient} ${style}`,
      `${ingredient} ${style} Supreme`
    ];
    
    return templates[Math.floor(Math.random() * templates.length)];
  };
  
  // Create appropriate measurements based on ingredient types
  const getAppropriateQuantity = (ingredient: string): string => {
    const lowerIng = ingredient.toLowerCase();
    
    // Proteins
    if (lowerIng.includes('chicken') || lowerIng.includes('beef') || 
        lowerIng.includes('pork') || lowerIng.includes('fish') || 
        lowerIng.includes('meat') || lowerIng.includes('turkey')) {
      return `1 pound ${ingredient}, cut into pieces`;
    }
    
    // Vegetables
    else if (lowerIng.includes('onion') || lowerIng.includes('pepper') || 
            lowerIng.includes('tomato') || lowerIng.includes('carrot') || 
            lowerIng.includes('potato') || lowerIng.includes('eggplant')) {
      return `2 medium ${ingredient}s, diced`;
    }
    
    // Leafy greens
    else if (lowerIng.includes('spinach') || lowerIng.includes('kale') || 
            lowerIng.includes('lettuce') || lowerIng.includes('cabbage')) {
      return `4 cups ${ingredient}, chopped`;
    }
    
    // Herbs
    else if (lowerIng.includes('basil') || lowerIng.includes('parsley') || 
            lowerIng.includes('cilantro') || lowerIng.includes('mint')) {
      return `1/4 cup fresh ${ingredient}, chopped`;
    }
    
    // Grains
    else if (lowerIng.includes('rice') || lowerIng.includes('pasta') || 
            lowerIng.includes('quinoa') || lowerIng.includes('couscous')) {
      return `1 1/2 cups ${ingredient}, uncooked`;
    }
    
    // Liquids
    else if (lowerIng.includes('water') || lowerIng.includes('broth') || 
            lowerIng.includes('milk') || lowerIng.includes('cream')) {
      return `2 cups ${ingredient}`;
    }
    
    // Fruits
    else if (lowerIng.includes('apple') || lowerIng.includes('pear') || 
            lowerIng.includes('orange') || lowerIng.includes('banana')) {
      return `2 ${ingredient}s, peeled and sliced`;
    }
    
    // Spices
    else if (lowerIng.includes('pepper') || lowerIng.includes('salt') || 
            lowerIng.includes('cumin') || lowerIng.includes('paprika')) {
      return `1 teaspoon ${ingredient}`;
    }
    
    // Default
    return `1 cup ${ingredient}, prepared appropriately`;
  };
  
  return [
    {
      id: `fallback-${timestamp}-1`,
      title: getRecipeName(mainIngredient, 'Stir-Fry'),
      description: `A delicious stir-fry featuring fresh ${ingredients.join(', ')} with aromatic garlic and herbs. Perfect for a quick weeknight dinner when you want something flavorful and satisfying.`,
      imageUrl: '',
      ingredients: [
        ...ingredients.map(ing => getAppropriateQuantity(ing)),
        '3 tbsp olive oil or sesame oil',
        '3 cloves garlic, minced',
        '1 medium onion, thinly sliced',
        '1 tbsp fresh ginger, grated',
        '2 tbsp soy sauce or tamari',
        '1 tbsp honey or maple syrup',
        '1/4 cup fresh herbs (cilantro, basil, or parsley)',
        'Salt and freshly ground pepper to taste',
        'Red pepper flakes (optional, for heat)'
      ],
      instructions: [
        'Prepare all ingredients: wash, peel, and chop vegetables; slice proteins if using.',
        'In a small bowl, whisk together soy sauce, honey, and 1 tbsp water to make the sauce.',
        'Heat a large wok or skillet over medium-high heat. Add 2 tbsp oil.',
        'Add garlic, onion, and ginger. Stir-fry for 1 minute until fragrant.',
        `Add firmer ${ingredients.join(' and ')} first and stir-fry for 3-4 minutes.`,
        'Add any softer ingredients and continue cooking for 2-3 minutes.',
        'Pour in the prepared sauce and toss to coat everything evenly.',
        'Cook for another 1-2 minutes until sauce is slightly thickened.',
        'Turn off heat and stir in fresh herbs.',
        'Season with salt, pepper, and red pepper flakes if desired.',
        'Serve hot over rice or noodles, or enjoy on its own for a low-carb option.'
      ],
      cookingTime: 25,
      servings: 4,
      calories: 320,
      tags: [...ingredients.map(ing => ing.toLowerCase()), 'stir-fry', 'quick', 'dinner', 'healthy'],
      cuisineType: 'Asian Fusion',
      dietaryInfo: {
        isVegetarian: !ingredients.some(ing => 
          ['chicken', 'beef', 'pork', 'fish', 'meat'].includes(ing.toLowerCase())
        ),
        isVegan: !ingredients.some(ing => 
          ['chicken', 'beef', 'pork', 'fish', 'meat', 'milk', 'cheese', 'egg', 'honey'].includes(ing.toLowerCase())
        ),
        isGlutenFree: !ingredients.some(ing => 
          ['wheat', 'flour', 'pasta', 'bread', 'soy sauce'].includes(ing.toLowerCase())
        ),
        isDairyFree: !ingredients.some(ing => 
          ['milk', 'cheese', 'butter', 'cream', 'yogurt'].includes(ing.toLowerCase())
        )
      }
    },
    {
      id: `fallback-${timestamp}-2`,
      title: getRecipeName(ingredients[1] || mainIngredient, 'Roasted Bake'),
      description: `A savory baked dish showcasing ${ingredients.join(', ')} with aromatic herbs and a bright lemon finish. This Mediterranean-inspired recipe brings out the natural flavors of the ingredients while creating a comforting meal perfect for family dinners.`,
      imageUrl: '',
      ingredients: [
        ...ingredients.map(ing => getAppropriateQuantity(ing)),
        '3 tbsp extra virgin olive oil',
        '2 tbsp unsalted butter, melted',
        '1/2 cup mixed fresh herbs (rosemary, thyme, oregano, parsley)',
        '4 cloves garlic, minced',
        '1 medium onion, finely diced',
        '1 large lemon, zested and juiced',
        '1 tsp paprika',
        '1/2 tsp red pepper flakes (optional)',
        '1 tsp salt',
        '1/2 tsp freshly ground black pepper',
        '1/4 cup dry white wine (optional)',
        '1/3 cup vegetable or chicken broth'
      ],
      instructions: [
        'Preheat oven to 375°F (190°C) and position rack in the center.',
        'In a large bowl, combine olive oil, melted butter, minced garlic, lemon zest, paprika, salt, and pepper.',
        `Add the prepared ${ingredients.join(' and ')} to the bowl and toss until evenly coated with the mixture.`,
        'Transfer everything to a large baking dish, arranging in a single layer when possible.',
        'Pour the broth and wine (if using) around the edges of the dish.',
        'Sprinkle the fresh herbs over the top, reserving some for garnish.',
        'Cover the dish with foil and bake for 20 minutes.',
        'Remove foil and continue baking for an additional 15-20 minutes until golden brown and tender.',
        'Remove from oven and let rest for 5 minutes.',
        'Drizzle with fresh lemon juice and garnish with the remaining herbs.',
        'Serve warm with your favorite side dish for a complete meal.'
      ],
      cookingTime: 45,
      servings: 6,
      calories: 380,
      tags: [...ingredients.map(ing => ing.toLowerCase()), 'baked', 'roasted', 'Mediterranean', 'dinner', 'family meal'],
      cuisineType: 'Mediterranean',
      dietaryInfo: {
        isVegetarian: !ingredients.some(ing => 
          ['chicken', 'beef', 'pork', 'fish', 'meat'].includes(ing.toLowerCase())
        ),
        isVegan: false, // Contains butter
        isGlutenFree: !ingredients.some(ing => 
          ['wheat', 'flour', 'pasta', 'bread', 'couscous'].includes(ing.toLowerCase())
        ),
        isDairyFree: false // Contains butter
      }
    }
  ];
}
