import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { Recipe, AIRecipeRequest } from '../types';
import { generateUniqueRecipes } from '../services/recipe-generator';
import { storeRecipe, getPopularRecipes as fetchPopularRecipes, likeRecipe as likeRecipeInDb } from '../services/supabase';

interface RecipeContextType {
  recipes: Recipe[];
  favoriteRecipes: Recipe[];
  popularRecipes: Recipe[];
  isLoading: boolean;
  addToFavorites: (recipe: Recipe) => void;
  removeFromFavorites: (recipeId: string) => void;
  isFavorite: (recipeId: string) => boolean;
  likeRecipe: (recipeId: string) => void;
  getLikes: (recipeId: string) => number;
  getRecipes: (request: AIRecipeRequest, offset?: number) => Promise<Recipe[]>;
  loadMoreRecipes: (request: AIRecipeRequest, currentRecipes: Recipe[]) => Promise<Recipe[]>;
}

const RecipeContext = createContext<RecipeContextType | undefined>(undefined);

export const RecipeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [recipes, setRecipes] = useState<Recipe[]>([]);
  const [favoriteRecipes, setFavoriteRecipes] = useState<Recipe[]>(() => {
    const savedFavorites = localStorage.getItem('favoriteRecipes');
    return savedFavorites ? JSON.parse(savedFavorites) : [];
  });
  const [recipeLikes, setRecipeLikes] = useState<Record<string, number>>(() => {
    const savedLikes = localStorage.getItem('recipeLikes');
    return savedLikes ? JSON.parse(savedLikes) : {};
  });
  const [popularRecipes, setPopularRecipes] = useState<Recipe[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  // Save favorite recipes to localStorage whenever it changes
  useEffect(() => {
    localStorage.setItem('favoriteRecipes', JSON.stringify(favoriteRecipes));
  }, [favoriteRecipes]);

  // Save recipe likes to localStorage whenever it changes
  useEffect(() => {
    localStorage.setItem('recipeLikes', JSON.stringify(recipeLikes));
  }, [recipeLikes]);

  // Fetch popular recipes from Supabase
  useEffect(() => {
    const fetchPopular = async () => {
      try {
        console.log('Fetching popular recipes in RecipeContext');
        const dbPopularRecipes = await fetchPopularRecipes();
        console.log('Popular recipes from Supabase:', dbPopularRecipes);
        
        if (dbPopularRecipes && dbPopularRecipes.length > 0) {
          setPopularRecipes(dbPopularRecipes);
          console.log('Set popular recipes from database:', dbPopularRecipes.length);
        } else {
          console.log('No popular recipes found in database, using fallback');
          // Fallback to initial recipes if no recipes in database
          const initialPopularRecipes: Recipe[] = [
            {
              id: 'pop-1',
              title: 'Mediterranean Grilled Chicken Salad',
              imageUrl: 'https://images.pexels.com/photos/6249321/pexels-photo-6249321.jpeg',
              description: 'A refreshing salad with grilled chicken, mixed greens, feta cheese, olives, and a zesty lemon dressing.',
              cookingTime: 30,
              servings: 2,
              calories: 320,
              ingredients: [
                '2 boneless chicken breasts',
                '4 cups mixed greens',
                '1/4 cup feta cheese, crumbled',
                '1/4 cup kalamata olives, pitted',
                '1 cucumber, diced',
                '1 red bell pepper, sliced',
                '1/4 red onion, thinly sliced',
                '2 tablespoons olive oil',
                '1 tablespoon lemon juice',
                '1 teaspoon dried oregano',
                'Salt and pepper to taste'
              ],
              instructions: [
                'Season chicken breasts with salt, pepper, and oregano.',
                'Grill chicken for 6-7 minutes per side until fully cooked.',
                'Let chicken rest for 5 minutes, then slice.',
                'In a large bowl, combine mixed greens, cucumber, bell pepper, and onion.',
                'Top with sliced chicken, feta cheese, and olives.',
                'Whisk together olive oil, lemon juice, oregano, salt, and pepper.',
                'Drizzle dressing over salad and serve immediately.'
              ],
              tags: ['Healthy', 'High Protein', 'Mediterranean', 'Salad', 'Quick Meal'],
              cuisineType: 'Mediterranean',
              dietaryInfo: {
                isVegetarian: false,
                isVegan: false,
                isGlutenFree: true,
                isDairyFree: false
              }
            },
            {
              id: 'pop-2',
              title: 'Classic Beef Bolognese',
              imageUrl: 'https://images.pexels.com/photos/6287465/pexels-photo-6287465.jpeg',
              description: 'A rich and hearty Italian pasta sauce with ground beef, tomatoes, and aromatic herbs and vegetables.',
              cookingTime: 80,
              servings: 6,
              calories: 450,
              ingredients: [
                '1 lb ground beef',
                '1 onion, finely chopped',
                '2 carrots, finely diced',
                '2 celery stalks, finely diced',
                '4 garlic cloves, minced',
                '1 can (28 oz) crushed tomatoes',
                '1/4 cup tomato paste',
                '1 cup beef broth',
                '1/2 cup red wine (optional)',
                '2 bay leaves',
                '1 teaspoon dried oregano',
                '1/2 teaspoon dried thyme',
                '1/4 cup fresh basil, chopped',
                '1/4 cup heavy cream (optional)',
                'Salt and pepper to taste',
                '1 lb spaghetti pasta',
                'Grated Parmesan cheese for serving'
              ],
              instructions: [
                'Heat olive oil in a large pot over medium heat.',
                'Add onion, carrots, and celery, and sauté until softened, about 5-7 minutes.',
                'Add garlic and cook for 1 minute until fragrant.',
                'Increase heat to medium-high and add ground beef, breaking it apart with a spoon.',
                'Cook until beef is browned, about 5-7 minutes.',
                'Add tomato paste and cook for 2 minutes.',
                'Pour in red wine (if using) and simmer until reduced by half.',
                'Add crushed tomatoes, beef broth, bay leaves, oregano, and thyme.',
                'Bring to a boil, then reduce heat to low and simmer uncovered for 45-60 minutes.',
                'Cook pasta according to package instructions.',
                'Remove bay leaves from sauce and stir in chopped basil and cream (if using).',
                'Season with salt and pepper to taste.',
                'Serve sauce over pasta with grated Parmesan cheese.'
              ],
              tags: ['Italian', 'Pasta', 'Dinner', 'Comfort Food'],
              cuisineType: 'Italian',
              dietaryInfo: {
                isVegetarian: false,
                isVegan: false,
                isGlutenFree: false,
                isDairyFree: false
              }
            },
            {
              id: 'pop-3',
              title: 'Double Chocolate Brownies',
              imageUrl: 'https://images.pexels.com/photos/2067396/pexels-photo-2067396.jpeg',
              description: 'Decadent, fudgy brownies with rich chocolate flavor and chunks of chocolate throughout.',
              cookingTime: 40,
              servings: 16,
              calories: 280,
              ingredients: [
                '1 cup unsalted butter',
                '2 cups granulated sugar',
                '4 large eggs',
                '1 tablespoon vanilla extract',
                '1 cup all-purpose flour',
                '1 cup unsweetened cocoa powder',
                '1/2 teaspoon salt',
                '1 cup chocolate chips',
                '1/2 cup chopped walnuts (optional)'
              ],
              instructions: [
                'Preheat oven to 350°F (175°C). Line a 9x13 inch baking dish with parchment paper.',
                'Melt butter in a large microwave-safe bowl.',
                'Whisk in sugar until combined.',
                'Add eggs one at a time, whisking well after each addition.',
                'Stir in vanilla extract.',
                'In a separate bowl, whisk together flour, cocoa powder, and salt.',
                'Gradually add dry ingredients to wet ingredients, stirring until just combined.',
                'Fold in chocolate chips and walnuts (if using).',
                'Pour batter into prepared baking dish and spread evenly.',
                'Bake for 25-30 minutes, or until a toothpick inserted in the center comes out with a few moist crumbs.',
                'Allow to cool completely before cutting into squares.'
              ],
              tags: ['Dessert', 'Chocolate', 'Baking', 'Sweet Treats'],
              cuisineType: 'American',
              dietaryInfo: {
                isVegetarian: true,
                isVegan: false,
                isGlutenFree: false,
                isDairyFree: false
              }
            }
          ];
          
          setPopularRecipes(initialPopularRecipes);
        }
      } catch (error) {
        console.error('Error fetching popular recipes:', error);
        // If there's an error, use the fallback recipes
        const fallbackRecipes: Recipe[] = [
          {
            id: 'fallback-1',
            title: 'Simple Pasta with Tomato Sauce',
            description: 'A quick and easy pasta dish with fresh tomato sauce.',
            imageUrl: 'https://images.pexels.com/photos/1279330/pexels-photo-1279330.jpeg',
            cookingTime: 20,
            servings: 2,
            calories: 350,
            ingredients: ['Pasta', 'Tomatoes', 'Garlic', 'Olive oil', 'Basil'],
            instructions: ['Cook pasta', 'Make sauce', 'Combine and serve'],
            cuisineType: 'Italian',
            tags: ['Quick', 'Pasta', 'Vegetarian'],
            dietaryInfo: {
              isVegetarian: true,
              isVegan: false,
              isGlutenFree: false,
              isDairyFree: true
            }
          }
        ];
        setPopularRecipes(fallbackRecipes);
      }
    };

    fetchPopular();
  }, []);

  // Function to handle liking a recipe
  const likeRecipe = async (recipeId: string) => {
    try {
      // Update local state first for immediate feedback
      setRecipeLikes(prev => ({
        ...prev,
        [recipeId]: (prev[recipeId] || 0) + 1
      }));

      // Update popular recipes if the recipe is in there
      setPopularRecipes(prevPopular => 
        prevPopular.map(recipe => 
          recipe.id === recipeId
            ? { ...recipe, likes: (recipe.likes || 0) + 1 }
            : recipe
        )
      );

      // Then update in the database
      await likeRecipeInDb(recipeId);
    } catch (error) {
      console.error('Error liking recipe:', error);
    }
  };

  // Function to get the likes for a recipe
  const getLikes = (recipeId: string): number => {
    return recipeLikes[recipeId] || 0;
  };

  // Add a recipe to favorites
  const addToFavorites = (recipe: Recipe) => {
    if (!favoriteRecipes.some(r => r.id === recipe.id)) {
      setFavoriteRecipes([...favoriteRecipes, recipe]);
    }
  };

  // Remove a recipe from favorites
  const removeFromFavorites = (recipeId: string) => {
    setFavoriteRecipes(favoriteRecipes.filter(recipe => recipe.id !== recipeId));
  };

  // Check if a recipe is in favorites
  const isFavorite = (recipeId: string): boolean => {
    return favoriteRecipes.some(recipe => recipe.id === recipeId);
  };

  // Function to get AI-generated recipes
  const getRecipes = async (request: AIRecipeRequest, offset: number = 0): Promise<Recipe[]> => {
    setIsLoading(true);
    try {
      // Generate recipes based on user's request
      const newRecipes = await generateUniqueRecipes(request, offset);
      
      // Store the generated recipes in Supabase
      for (const recipe of newRecipes) {
        await storeRecipe(recipe);
      }
      
      // Update local state
      setRecipes(newRecipes);
      return newRecipes;
    } catch (error) {
      console.error('Error generating recipes:', error);
      return [];
    } finally {
      setIsLoading(false);
    }
  };

  // Function to load more recipes (used for pagination)
  const loadMoreRecipes = async (request: AIRecipeRequest, currentRecipes: Recipe[]): Promise<Recipe[]> => {
    setIsLoading(true);
    try {
      // Generate more recipes with an offset to get different results
      const moreRecipes = await generateUniqueRecipes(request, currentRecipes.length);
      
      // Store the generated recipes in Supabase
      for (const recipe of moreRecipes) {
        await storeRecipe(recipe);
      }
      
      // Combine with existing recipes
      const combinedRecipes = [...currentRecipes, ...moreRecipes];
      setRecipes(combinedRecipes);
      return combinedRecipes;
    } catch (error) {
      console.error('Error loading more recipes:', error);
      return currentRecipes;
    } finally {
      setIsLoading(false);
    }
  };

  const contextValue: RecipeContextType = {
    recipes,
    favoriteRecipes,
    popularRecipes,
    isLoading,
    addToFavorites,
    removeFromFavorites,
    isFavorite,
    likeRecipe,
    getLikes,
    getRecipes,
    loadMoreRecipes
  };

  return (
    <RecipeContext.Provider value={contextValue}>
      {children}
    </RecipeContext.Provider>
  );
};

// Custom hook to use the recipe context
export const useRecipes = () => {
  const context = useContext(RecipeContext);
  if (context === undefined) {
    throw new Error('useRecipes must be used within a RecipeProvider');
  }
  return context;
};
